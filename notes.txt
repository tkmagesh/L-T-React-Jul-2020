RIA (Rich Internet Applications)


ES6 (ESNext, ES2015)
1. let
2. const
3. Array destructuring
4. Rest operator (array)
5. Spread operator (array)
6. Object destructuring
7. Rest operator (object)
8. Spread operator (object)
9. Default arguments
10. Arrow functions
11. Template strings
12. Object construction
13. class


HTML  & JSX

HTML - Just open tag is allowed (<br>, <hr>)
JSX - Every open tag must have the corresponding close tag (<hr/>, <br/>)

HTML - use the 'class' attribute for css styles
JSX - use 'className' instead of 'class'

HTML - use the 'for' attribute for label
JSX - use 'htmlFor' instead of 'for'

State
    UI State
        data that supports the presentation logic
        Very very unlikely that other components might be interested in ths state
        Can be kept in the component

    App State
        data that supports the core business logic
        Very very LIKELY that the whole application might be interested in this state
        SHOULD BE KEPT AWAY from the component


    Store
        Manages the application state for the whole application
        Single Point of contact for any application state in the application
        APIs
            - getState()
            - subscribe(callback)
            
    create-react-app
    node.js module

npm & yarn -> package managers in node.js

windows
npm install yarn -g

npx create-react-app my-app

ES6 modules
    Anything defined in a JS file is considered private
    Anything public should be explicity exported
    Anything from outside has to be explicity imported

Application Folder structure
src
    /bugTracker
        /actions
            addNew.js
            toggle.js
        /views
            BugStats.js
            BugEdit.js
        index.js (BugTracker component)

    /reducers
        bugsReducer.js

    /store
        index.js

to install redux
> yarn add redux

Container Component / Smart Component  (components using the connect api)
    interface with the redux infrastructure
    Advisable to have fewer container components

Presentation Component / Dumb Component


Middlewares in Redux
    Any common functionality that need to be applied / available for all the actions


function getData(){
    var p = axios.get('http://localhost:3030/bugs');
    var p2 = p.then(function(response){
        return response.data;
    });
    return p2;
}

(OR)

function getData(){
    return axios
        .get('http://localhost:3030/bugs')
        .then(function(response){
            return response.data;
        });
}

getData()
    .then(function(bugs){
        console.table(bugs);
    })


In the whole application there are only 2 places where you have access to the whole store state
    1. mapStateToProps
        Use this function if you want to access to the store state for presentation
    2. action function ( when using redux-thunk)
        Use this function if you want to access to the store state for manipulation
    

Lifecycle events
    componentWillMount
    componentDidMount
    render
    shouldComponentUpdate
    componentWillUpdate
    componentWillUnmount


React Hooks
    Functions
    the hook names start with the word 'use'

    useState
    useEffects
    useReducer
    useMemo


Bug Tracker
    Evaluation Criteria
        1. modularity
        2. readable
        3. naming conventions
        4. functionality
        5. comments
        6. use only functional components

Assignment for evaluation

    Projects (id, name, description)
        Add a navigation menu to the projects


        Add the projects
        List the projects

        including server communication


Upload the assignment to https://drive.google.com/drive/folders/1nVEil2OjDUi03B9NjkFRhELiAVfg3MAJ?usp=sharing
(Remove the node_modules folter when uploading)

contact me @ 99019-11221 / tkmagesh77@gmail.com

